// Code generated by MockGen. DO NOT EDIT.
// Source: ghrelease/ghrelease.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v32/github"
	os "os"
	reflect "reflect"
)

// MockghRepoSvc is a mock of ghRepoSvc interface
type MockghRepoSvc struct {
	ctrl     *gomock.Controller
	recorder *MockghRepoSvcMockRecorder
}

// MockghRepoSvcMockRecorder is the mock recorder for MockghRepoSvc
type MockghRepoSvcMockRecorder struct {
	mock *MockghRepoSvc
}

// NewMockghRepoSvc creates a new mock instance
func NewMockghRepoSvc(ctrl *gomock.Controller) *MockghRepoSvc {
	mock := &MockghRepoSvc{ctrl: ctrl}
	mock.recorder = &MockghRepoSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockghRepoSvc) EXPECT() *MockghRepoSvcMockRecorder {
	return m.recorder
}

// GetReleaseByTag mocks base method
func (m *MockghRepoSvc) GetReleaseByTag(ctx context.Context, owner, repo, tag string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseByTag", ctx, owner, repo, tag)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReleaseByTag indicates an expected call of GetReleaseByTag
func (mr *MockghRepoSvcMockRecorder) GetReleaseByTag(ctx, owner, repo, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseByTag", reflect.TypeOf((*MockghRepoSvc)(nil).GetReleaseByTag), ctx, owner, repo, tag)
}

// DeleteRelease mocks base method
func (m *MockghRepoSvc) DeleteRelease(ctx context.Context, owner, repo string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelease", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRelease indicates an expected call of DeleteRelease
func (mr *MockghRepoSvcMockRecorder) DeleteRelease(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelease", reflect.TypeOf((*MockghRepoSvc)(nil).DeleteRelease), ctx, owner, repo, id)
}

// CreateRelease mocks base method
func (m *MockghRepoSvc) CreateRelease(ctx context.Context, owner, repo string, release *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelease", ctx, owner, repo, release)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRelease indicates an expected call of CreateRelease
func (mr *MockghRepoSvcMockRecorder) CreateRelease(ctx, owner, repo, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelease", reflect.TypeOf((*MockghRepoSvc)(nil).CreateRelease), ctx, owner, repo, release)
}

// UploadReleaseAsset mocks base method
func (m *MockghRepoSvc) UploadReleaseAsset(ctx context.Context, owner, repo string, id int64, opts *github.UploadOptions, file *os.File) (*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadReleaseAsset", ctx, owner, repo, id, opts, file)
	ret0, _ := ret[0].(*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadReleaseAsset indicates an expected call of UploadReleaseAsset
func (mr *MockghRepoSvcMockRecorder) UploadReleaseAsset(ctx, owner, repo, id, opts, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadReleaseAsset", reflect.TypeOf((*MockghRepoSvc)(nil).UploadReleaseAsset), ctx, owner, repo, id, opts, file)
}
