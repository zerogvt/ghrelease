package gomock // import "github.com/golang/mock/gomock"

Package gomock is a mock framework for Go.

Standard usage:

    (1) Define an interface that you wish to mock.
          type MyInterface interface {
            SomeMethod(x int64, y string)
          }
    (2) Use mockgen to generate a mock from the interface.
    (3) Use the mock in a test:
          func TestMyThing(t *testing.T) {
            mockCtrl := gomock.NewController(t)
            defer mockCtrl.Finish()

            mockObj := something.NewMockMyInterface(mockCtrl)
            mockObj.EXPECT().SomeMethod(4, "blah")
            // pass mockObj to a real object and play with it.
          }

By default, expected calls are not enforced to run in any particular order.
Call order dependency can be enforced by use of InOrder and/or Call.After.
Call.After can create more varied call order dependencies, but InOrder is
often more convenient.

The following examples create equivalent call order dependencies.

Example of using Call.After to chain expected call order:

    firstCall := mockObj.EXPECT().SomeMethod(1, "first")
    secondCall := mockObj.EXPECT().SomeMethod(2, "second").After(firstCall)
    mockObj.EXPECT().SomeMethod(3, "third").After(secondCall)

Example of using InOrder to declare expected call order:

    gomock.InOrder(
        mockObj.EXPECT().SomeMethod(1, "first"),
        mockObj.EXPECT().SomeMethod(2, "second"),
        mockObj.EXPECT().SomeMethod(3, "third"),
    )

TODO:

    - Handle different argument/return types (e.g. ..., chan, map, interface).

func InOrder(calls ...*Call)
type Call struct{ ... }
type Controller struct{ ... }
    func NewController(t TestReporter) *Controller
    func WithContext(ctx context.Context, t TestReporter) (*Controller, context.Context)
type GotFormatter interface{ ... }
type GotFormatterFunc func(got interface{}) string
type Matcher interface{ ... }
    func All(ms ...Matcher) Matcher
    func Any() Matcher
    func AssignableToTypeOf(x interface{}) Matcher
    func Eq(x interface{}) Matcher
    func GotFormatterAdapter(s GotFormatter, m Matcher) Matcher
    func Len(i int) Matcher
    func Nil() Matcher
    func Not(x interface{}) Matcher
    func WantFormatter(s fmt.Stringer, m Matcher) Matcher
type StringerFunc func() string
type TestHelper interface{ ... }
type TestReporter interface{ ... }
